{"version":3,"file":"users.controller.js","names":["bcrypt","getConnection","queries","getUsers","req","res","client","result","query","users","release","status","json","rows","error","console","msg","getUsersById","id","params","userResult","length","userData","ordersResult","getUserOrdersById","userOrders","user","orders","createUsers","user_name","lastname","email","phone","city","address","neighborhood","user_password","user_type","body","emailCheck","rowCount","hashedPassword","hash","updateUsers","updates","values","paramIndex","push","join","deleteUsers","updateUserStatus","status_id"],"sources":["../../src/controllers/users.controller.js"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\n\r\n// Obtener todos los usuarios\r\nexport const getUsers = async (req, res) => {\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.users.getUsers);\r\n    client.release();\r\n    return res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error('Error al obtener los usuarios:', error);\r\n    return res.status(500).json({ msg: 'Error al obtener los usuarios' });\r\n  }\r\n};\r\n\r\n// Obtener un usuario por ID\r\nexport const getUsersById = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  if (!id) {\r\n    return res.status(400).json({ msg: 'Por favor proporciona un ID válido.' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const userResult = await client.query(queries.users.getUsersById, [id]);\r\n\r\n    if (userResult.rows.length === 0) {\r\n      client.release();\r\n      return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n    }\r\n\r\n    const userData = userResult.rows[0];\r\n    const ordersResult = await client.query(queries.users.getUserOrdersById, [id]);\r\n    const userOrders = ordersResult.rows;\r\n\r\n    client.release();\r\n\r\n    return res.status(200).json({\r\n      user: userData,\r\n      orders: userOrders,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n\r\n// Crear un nuevo usuario\r\nexport const createUsers = async (req, res) => {\r\n  const { user_name, lastname, email, phone, city, address, neighborhood, user_password, user_type } = req.body;\r\n\r\n  if (!user_name || !lastname || !email || !phone || !city || !address || !neighborhood || !user_password || !user_type) {\r\n    return res.status(400).json({\r\n      msg: 'No se permiten campos vacíos. Asegúrate de que todos los campos obligatorios estén completos.'\r\n    });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const emailCheck = await client.query('SELECT * FROM users WHERE email = $1', [email]);\r\n    if (emailCheck.rowCount > 0) {\r\n      client.release();\r\n      return res.status(400).json({ msg: 'El correo electrónico ya está registrado.' });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(user_password, 10);\r\n    await client.query(queries.users.createUsers, [user_name, lastname, email, phone, city, address, neighborhood, hashedPassword, user_type]);\r\n\r\n    client.release();\r\n    return res.status(201).json({ msg: 'Usuario creado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al crear usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor, intente nuevamente.' });\r\n  }\r\n};\r\n\r\n// Actualizar la información de un usuario\r\nexport const updateUsers = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { user_name, lastname, email, phone, city, address, neighborhood, user_password, user_type } = req.body;\r\n\r\n  if (!id) {\r\n    return res.status(400).json({ msg: 'ID del usuario es obligatorio.' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const updates = [];\r\n    const values = [];\r\n    let paramIndex = 1;\r\n\r\n    if (user_name) { updates.push(`user_name = $${paramIndex++}`); values.push(user_name); }\r\n    if (lastname) { updates.push(`lastname = $${paramIndex++}`); values.push(lastname); }\r\n    if (email) { updates.push(`email = $${paramIndex++}`); values.push(email); }\r\n    if (phone) { updates.push(`phone = $${paramIndex++}`); values.push(phone); }\r\n    if (city) { updates.push(`city = $${paramIndex++}`); values.push(city); }\r\n    if (address) { updates.push(`address = $${paramIndex++}`); values.push(address); }\r\n    if (neighborhood) { updates.push(`neighborhood = $${paramIndex++}`); values.push(neighborhood); }\r\n    if (user_password) {\r\n      const hashedPassword = await bcrypt.hash(user_password, 10);\r\n      updates.push(`user_password = $${paramIndex++}`);\r\n      values.push(hashedPassword);\r\n    }\r\n    if (user_type) { updates.push(`user_type = $${paramIndex++}`); values.push(user_type); }\r\n\r\n    values.push(id);\r\n\r\n    const query = `\r\n      UPDATE users\r\n      SET ${updates.join(', ')}\r\n      WHERE id = $${paramIndex}\r\n      RETURNING *;\r\n    `;\r\n\r\n    const result = await client.query(query, values);\r\n    client.release();\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n    }\r\n\r\n    return res.status(200).json({ msg: 'Usuario actualizado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n\r\n// Eliminar un usuario\r\nexport const deleteUsers = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  if (!id) {\r\n    return res.status(400).json({ msg: 'Por favor proporciona un ID válido.' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.users.deleteUsers, [id]);\r\n\r\n    client.release();\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n    }\r\n\r\n    return res.status(200).json({ msg: 'Usuario eliminado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n\r\n// Actualizar el estado de un usuario\r\nexport const updateUserStatus = async (req, res) => {\r\n  const { id, status_id } = req.params;\r\n\r\n  if (!id || !status_id) {\r\n    return res.status(400).json({\r\n      msg: 'Por favor proporciona un ID de usuario y un nuevo estado válido.'\r\n    });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    await client.query(queries.users.updateUserStatus, [id, status_id]);\r\n    client.release();\r\n    return res.status(200).json({ msg: 'Estado del usuario actualizado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar el estado del usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}