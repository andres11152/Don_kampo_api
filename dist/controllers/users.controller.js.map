{"version":3,"file":"users.controller.js","names":["bcrypt","getConnection","queries","getUsers","_ref","_asyncToGenerator","req","res","client","result","query","users","release","status","json","rows","error","console","msg","_x","_x2","apply","arguments","getUsersById","_ref2","id","params","userResult","length","userData","ordersResult","getUserOrdersById","userOrders","user","orders","_x3","_x4","createUsers","_ref3","user_name","lastname","email","phone","city","address","neighborhood","user_password","user_type","body","emailCheck","rowCount","hashedPassword","hash","_x5","_x6","updateUsers","_ref4","updates","values","paramIndex","push","join","_x7","_x8","deleteUsers","_ref5","_x9","_x10","updateUserStatus","_ref6","status_id","_x11","_x12"],"sources":["../../src/controllers/users.controller.js"],"sourcesContent":["import bcrypt from 'bcrypt';\r\nimport { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\n\r\n// Obtener todos los usuarios\r\nexport const getUsers = async (req, res) => {\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.users.getUsers);\r\n    client.release();\r\n    return res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error('Error al obtener los usuarios:', error);\r\n    return res.status(500).json({ msg: 'Error al obtener los usuarios' });\r\n  }\r\n};\r\n\r\n// Obtener un usuario por ID\r\nexport const getUsersById = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  if (!id) {\r\n    return res.status(400).json({ msg: 'Por favor proporciona un ID válido.' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const userResult = await client.query(queries.users.getUsersById, [id]);\r\n\r\n    if (userResult.rows.length === 0) {\r\n      client.release();\r\n      return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n    }\r\n\r\n    const userData = userResult.rows[0];\r\n    const ordersResult = await client.query(queries.users.getUserOrdersById, [id]);\r\n    const userOrders = ordersResult.rows;\r\n\r\n    client.release();\r\n\r\n    return res.status(200).json({\r\n      user: userData,\r\n      orders: userOrders,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error al obtener usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n\r\n// Crear un nuevo usuario\r\nexport const createUsers = async (req, res) => {\r\n  const { user_name, lastname, email, phone, city, address, neighborhood, user_password, user_type } = req.body;\r\n\r\n  if (!user_name || !lastname || !email || !phone || !city || !address || !neighborhood || !user_password || !user_type) {\r\n    return res.status(400).json({\r\n      msg: 'No se permiten campos vacíos. Asegúrate de que todos los campos obligatorios estén completos.'\r\n    });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const emailCheck = await client.query('SELECT * FROM users WHERE email = $1', [email]);\r\n    if (emailCheck.rowCount > 0) {\r\n      client.release();\r\n      return res.status(400).json({ msg: 'El correo electrónico ya está registrado.' });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(user_password, 10);\r\n    await client.query(queries.users.createUsers, [user_name, lastname, email, phone, city, address, neighborhood, hashedPassword, user_type]);\r\n\r\n    client.release();\r\n    return res.status(201).json({ msg: 'Usuario creado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al crear usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor, intente nuevamente.' });\r\n  }\r\n};\r\n\r\n// Actualizar la información de un usuario\r\nexport const updateUsers = async (req, res) => {\r\n  const { id } = req.params;\r\n  const { user_name, lastname, email, phone, city, address, neighborhood, user_password, user_type } = req.body;\r\n\r\n  if (!id) {\r\n    return res.status(400).json({ msg: 'ID del usuario es obligatorio.' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const updates = [];\r\n    const values = [];\r\n    let paramIndex = 1;\r\n\r\n    if (user_name) { updates.push(`user_name = $${paramIndex++}`); values.push(user_name); }\r\n    if (lastname) { updates.push(`lastname = $${paramIndex++}`); values.push(lastname); }\r\n    if (email) { updates.push(`email = $${paramIndex++}`); values.push(email); }\r\n    if (phone) { updates.push(`phone = $${paramIndex++}`); values.push(phone); }\r\n    if (city) { updates.push(`city = $${paramIndex++}`); values.push(city); }\r\n    if (address) { updates.push(`address = $${paramIndex++}`); values.push(address); }\r\n    if (neighborhood) { updates.push(`neighborhood = $${paramIndex++}`); values.push(neighborhood); }\r\n    if (user_password) {\r\n      const hashedPassword = await bcrypt.hash(user_password, 10);\r\n      updates.push(`user_password = $${paramIndex++}`);\r\n      values.push(hashedPassword);\r\n    }\r\n    if (user_type) { updates.push(`user_type = $${paramIndex++}`); values.push(user_type); }\r\n\r\n    values.push(id);\r\n\r\n    const query = `\r\n      UPDATE users\r\n      SET ${updates.join(', ')}\r\n      WHERE id = $${paramIndex}\r\n      RETURNING *;\r\n    `;\r\n\r\n    const result = await client.query(query, values);\r\n    client.release();\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n    }\r\n\r\n    return res.status(200).json({ msg: 'Usuario actualizado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n\r\n// Eliminar un usuario\r\nexport const deleteUsers = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  if (!id) {\r\n    return res.status(400).json({ msg: 'Por favor proporciona un ID válido.' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.users.deleteUsers, [id]);\r\n\r\n    client.release();\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n    }\r\n\r\n    return res.status(200).json({ msg: 'Usuario eliminado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al eliminar usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n\r\n// Actualizar el estado de un usuario\r\nexport const updateUserStatus = async (req, res) => {\r\n  const { id, status_id } = req.params;\r\n\r\n  if (!id || !status_id) {\r\n    return res.status(400).json({\r\n      msg: 'Por favor proporciona un ID de usuario y un nuevo estado válido.'\r\n    });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    await client.query(queries.users.updateUserStatus, [id, status_id]);\r\n    client.release();\r\n    return res.status(200).json({ msg: 'Estado del usuario actualizado exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar el estado del usuario:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.' });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}