{"version":3,"file":"login.controller.js","names":["bcrypt","jwt","getConnection","JWT_SECRET","loginController","req","res","email","user_password","body","status","json","message","client","result","query","rows","length","user","isMatch","compare","token","sign","id","user_type","expiresIn","user_name","lastname","error","console","headersSent"],"sources":["../../src/controllers/login.controller.js"],"sourcesContent":["// login.controller.js\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { getConnection } from '../database/connection.js';\r\n\r\nconst JWT_SECRET = 'Xpto-secret0-key';\r\n\r\nexport const loginController = async (req, res) => {\r\n  const { email, user_password } = req.body;\r\n\r\n  if (!email || !user_password) {\r\n    return res.status(400).json({ message: 'Email y contraseña son requeridos' });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query('SELECT * FROM users WHERE email = $1', [email]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(401).json({ message: 'Email o contraseña incorrectos' });\r\n    }\r\n\r\n    const user = result.rows[0];\r\n    const isMatch = await bcrypt.compare(user_password, user.user_password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ message: 'Email o contraseña incorrectos' });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: user.id, email: user.email, user_type: user.user_type },\r\n      JWT_SECRET,\r\n      { expiresIn: '1h' }\r\n    );\r\n\r\n    res.status(200).json({\r\n      message: 'Inicio de sesión exitoso',\r\n      token,\r\n      user: {\r\n        id: user.id,\r\n        user_name: user.user_name,\r\n        lastname: user.lastname,\r\n        email: user.email,\r\n        user_type: user.user_type\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error durante el inicio de sesión:', error);\r\n    if (!res.headersSent) {\r\n      res.status(500).json({ message: 'Error interno del servidor' });\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,aAAa,QAAQ,2BAA2B;AAEzD,MAAMC,UAAU,GAAG,kBAAkB;AAErC,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,GAAG,EAAEC,GAAG,KAAK;EACjD,MAAM;IAAEC,KAAK;IAAEC;EAAc,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEzC,IAAI,CAACF,KAAK,IAAI,CAACC,aAAa,EAAE;IAC5B,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAoC,CAAC,CAAC;EAC/E;EAEA,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMX,aAAa,CAAC,CAAC;IACpC,MAAMY,MAAM,GAAG,MAAMD,MAAM,CAACE,KAAK,CAAC,sCAAsC,EAAE,CAACR,KAAK,CAAC,CAAC;IAElF,IAAIO,MAAM,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAOX,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiC,CAAC,CAAC;IAC5E;IAEA,MAAMM,IAAI,GAAGJ,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;IAC3B,MAAMG,OAAO,GAAG,MAAMnB,MAAM,CAACoB,OAAO,CAACZ,aAAa,EAAEU,IAAI,CAACV,aAAa,CAAC;IACvE,IAAI,CAACW,OAAO,EAAE;MACZ,OAAOb,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAiC,CAAC,CAAC;IAC5E;IAEA,MAAMS,KAAK,GAAGpB,GAAG,CAACqB,IAAI,CACpB;MAAEC,EAAE,EAAEL,IAAI,CAACK,EAAE;MAAEhB,KAAK,EAAEW,IAAI,CAACX,KAAK;MAAEiB,SAAS,EAAEN,IAAI,CAACM;IAAU,CAAC,EAC7DrB,UAAU,EACV;MAAEsB,SAAS,EAAE;IAAK,CACpB,CAAC;IAEDnB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACnBC,OAAO,EAAE,0BAA0B;MACnCS,KAAK;MACLH,IAAI,EAAE;QACJK,EAAE,EAAEL,IAAI,CAACK,EAAE;QACXG,SAAS,EAAER,IAAI,CAACQ,SAAS;QACzBC,QAAQ,EAAET,IAAI,CAACS,QAAQ;QACvBpB,KAAK,EAAEW,IAAI,CAACX,KAAK;QACjBiB,SAAS,EAAEN,IAAI,CAACM;MAClB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,IAAI,CAACtB,GAAG,CAACwB,WAAW,EAAE;MACpBxB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA6B,CAAC,CAAC;IACjE;EACF;AACF,CAAC","ignoreList":[]}