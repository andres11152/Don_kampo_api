{"version":3,"file":"customerTypesController.js","names":["getConnection","queries","getCustomerTypes","_ref","_asyncToGenerator","req","res","client","Error","result","query","customerTypes","getAllCustomerTypes","release","rows","length","status","json","msg","error","console","message","_x","_x2","apply","arguments","updateAllShippingCosts","_ref2","hogar","fruver","supermercado","restaurante","body","parseFloat","isNaN","log","_x3","_x4"],"sources":["../../src/controllers/customerTypesController.js"],"sourcesContent":["import { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\n\r\nexport const getCustomerTypes = async (req, res) => {\r\n  try {\r\n    const client = await getConnection();  // Establecemos la conexión\r\n    if (!client) {\r\n      throw new Error('No se pudo establecer la conexión con la base de datos.');\r\n    }\r\n    \r\n    // Ejecutamos la consulta para obtener todos los tipos de cliente\r\n    const result = await client.query(queries.customerTypes.getAllCustomerTypes);\r\n    \r\n    client.release();  // Liberamos el cliente una vez que la consulta esté completada\r\n    \r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ msg: 'No se encontraron tipos de cliente.' });\r\n    }\r\n    \r\n    // Devolvemos los tipos de cliente obtenidos\r\n    return res.status(200).json(result.rows); \r\n  } catch (error) {\r\n    console.error('Error al obtener los tipos de cliente:', error);\r\n    return res.status(500).json({\r\n      msg: 'Error al obtener los tipos de cliente',\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateAllShippingCosts = async (req, res) => {\r\n  let { hogar, fruver, supermercado, restaurante } = req.body;\r\n\r\n    hogar = parseFloat(hogar);\r\n    fruver = parseFloat(fruver);\r\n    supermercado = parseFloat(supermercado);\r\n    restaurante = parseFloat(restaurante);\r\n    \r\n    if (isNaN(hogar) || isNaN(fruver) || isNaN(supermercado) || isNaN(restaurante)) {\r\n      return res.status(400).json({ msg: 'Por favor proporciona todos los costos de envío como valores numéricos.' });\r\n    }\r\n    console.log('Hogar:', hogar, 'Fruver:', fruver, 'Supermercado:', supermercado, 'Restaurante:', restaurante);\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    await client.query(queries.customerTypes.updateAllShippingCosts, [\r\n      hogar,\r\n      fruver,\r\n      supermercado,\r\n      restaurante,\r\n    ]);\r\n    client.release();\r\n\r\n    return res.status(200).json({ msg: 'Costos de envío actualizados exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar los costos de envío:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.', error: error.message });\r\n  }\r\n};\r\n\r\n\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]}