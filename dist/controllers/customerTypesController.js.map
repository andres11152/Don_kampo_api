{"version":3,"file":"customerTypesController.js","names":["_connection","require","_queriesInterface","getCustomerTypes","req","res","client","getConnection","Error","result","query","queries","customerTypes","getAllCustomerTypes","release","rows","length","status","json","msg","error","console","message","exports","updateAllShippingCosts","hogar","fruver","supermercado","restaurante","body","parseFloat","isNaN","log"],"sources":["../../src/controllers/customerTypesController.js"],"sourcesContent":["import { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\n\r\nexport const getCustomerTypes = async (req, res) => {\r\n  try {\r\n    const client = await getConnection();  // Establecemos la conexión\r\n    if (!client) {\r\n      throw new Error('No se pudo establecer la conexión con la base de datos.');\r\n    }\r\n    \r\n    // Ejecutamos la consulta para obtener todos los tipos de cliente\r\n    const result = await client.query(queries.customerTypes.getAllCustomerTypes);\r\n    \r\n    client.release();  // Liberamos el cliente una vez que la consulta esté completada\r\n    \r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ msg: 'No se encontraron tipos de cliente.' });\r\n    }\r\n    \r\n    // Devolvemos los tipos de cliente obtenidos\r\n    return res.status(200).json(result.rows); \r\n  } catch (error) {\r\n    console.error('Error al obtener los tipos de cliente:', error);\r\n    return res.status(500).json({\r\n      msg: 'Error al obtener los tipos de cliente',\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateAllShippingCosts = async (req, res) => {\r\n  let { hogar, fruver, supermercado, restaurante } = req.body;\r\n\r\n    hogar = parseFloat(hogar);\r\n    fruver = parseFloat(fruver);\r\n    supermercado = parseFloat(supermercado);\r\n    restaurante = parseFloat(restaurante);\r\n    \r\n    if (isNaN(hogar) || isNaN(fruver) || isNaN(supermercado) || isNaN(restaurante)) {\r\n      return res.status(400).json({ msg: 'Por favor proporciona todos los costos de envío como valores numéricos.' });\r\n    }\r\n    console.log('Hogar:', hogar, 'Fruver:', fruver, 'Supermercado:', supermercado, 'Restaurante:', restaurante);\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    await client.query(queries.customerTypes.updateAllShippingCosts, [\r\n      hogar,\r\n      fruver,\r\n      supermercado,\r\n      restaurante,\r\n    ]);\r\n    client.release();\r\n\r\n    return res.status(200).json({ msg: 'Costos de envío actualizados exitosamente.' });\r\n  } catch (error) {\r\n    console.error('Error al actualizar los costos de envío:', error);\r\n    return res.status(500).json({ msg: 'Error interno del servidor.', error: error.message });\r\n  }\r\n};\r\n\r\n\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]}