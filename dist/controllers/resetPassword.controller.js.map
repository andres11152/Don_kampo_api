{"version":3,"file":"resetPassword.controller.js","names":["getConnection","queries","sendEmail","bcrypt","requestPasswordReset","_ref","_asyncToGenerator","req","res","email","provider","body","client","result","query","users","getUserByEmail","rows","length","release","status","json","msg","userId","id","verificationCode","Math","floor","random","toString","expirationDate","Date","now","expirationDateInSeconds","getTime","updateUserResetToken","error","console","_x","_x2","apply","arguments","verifyCodeAndResetPassword","_ref2","code","newPassword","currentTimeInSeconds","verifyUserResetCode","hashedPassword","hash","updateUserPassword","_x3","_x4"],"sources":["../../src/controllers/resetPassword.controller.js"],"sourcesContent":["import { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\nimport { sendEmail } from '../utils/mailer.js';  \r\nimport bcrypt from 'bcrypt';\r\n\r\nexport const requestPasswordReset = async (req, res) => {\r\n  const { email, provider = 'gmail' } = req.body;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    \r\n    const result = await client.query(queries.users.getUserByEmail, [email]);\r\n    if (result.rows.length === 0) {\r\n      client.release();\r\n      return res.status(404).json({ msg: 'Email not found' });\r\n    }\r\n\r\n    const userId = result.rows[0].id;\r\n    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expirationDate = new Date(Date.now() + 10 * 60 * 1000);\r\n    const expirationDateInSeconds = Math.floor(expirationDate.getTime() / 1000);\r\n\r\n    await client.query(\r\n      queries.users.updateUserResetToken,\r\n      [verificationCode, expirationDateInSeconds, userId]\r\n    );\r\n\r\n    await sendEmail(\r\n      email,  \r\n      'Password Reset Code',  \r\n      `Your password reset code is: ${verificationCode}`,  \r\n      provider  \r\n    );\r\n\r\n    client.release();\r\n    res.status(200).json({ msg: 'Verification code sent to email' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n};\r\n\r\nexport const verifyCodeAndResetPassword = async (req, res) => {\r\n  const { email, code, newPassword } = req.body;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n\r\n    const currentTimeInSeconds = Math.floor(Date.now() / 1000);\r\n\r\n    const result = await client.query(\r\n      queries.users.verifyUserResetCode, \r\n      [email, code, currentTimeInSeconds]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      client.release();\r\n      return res.status(400).json({ msg: 'Invalid or expired code' });\r\n    }\r\n\r\n    const userId = result.rows[0].id;\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n    await client.query(\r\n      queries.users.updateUserPassword,\r\n      [hashedPassword, userId]\r\n    );\r\n\r\n    client.release();\r\n    res.status(200).json({ msg: 'Password successfully reset' });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}