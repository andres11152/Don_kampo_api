{"version":3,"file":"resetPassword.controller.js","names":["_connection","require","_queriesInterface","_mailer","_bcrypt","_interopRequireDefault","requestPasswordReset","req","res","email","provider","body","client","getConnection","result","query","queries","users","getUserByEmail","rows","length","release","status","json","msg","userId","id","verificationCode","Math","floor","random","toString","expirationDate","Date","now","expirationDateInSeconds","getTime","updateUserResetToken","sendEmail","error","console","exports","verifyCodeAndResetPassword","code","newPassword","currentTimeInSeconds","verifyUserResetCode","hashedPassword","bcrypt","hash","updateUserPassword"],"sources":["../../src/controllers/resetPassword.controller.js"],"sourcesContent":["import { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\nimport { sendEmail } from '../utils/mailer.js';  \r\nimport bcrypt from 'bcrypt';\r\n\r\nexport const requestPasswordReset = async (req, res) => {\r\n  const { email, provider = 'gmail' } = req.body;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    \r\n    const result = await client.query(queries.users.getUserByEmail, [email]);\r\n    if (result.rows.length === 0) {\r\n      client.release();\r\n      return res.status(404).json({ msg: 'Email not found' });\r\n    }\r\n\r\n    const userId = result.rows[0].id;\r\n    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expirationDate = new Date(Date.now() + 10 * 60 * 1000);\r\n    const expirationDateInSeconds = Math.floor(expirationDate.getTime() / 1000);\r\n\r\n    await client.query(\r\n      queries.users.updateUserResetToken,\r\n      [verificationCode, expirationDateInSeconds, userId]\r\n    );\r\n\r\n    await sendEmail(\r\n      email,  \r\n      'Password Reset Code',  \r\n      `Your password reset code is: ${verificationCode}`,  \r\n      provider  \r\n    );\r\n\r\n    client.release();\r\n    res.status(200).json({ msg: 'Verification code sent to email' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n};\r\n\r\nexport const verifyCodeAndResetPassword = async (req, res) => {\r\n  const { email, code, newPassword } = req.body;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n\r\n    const currentTimeInSeconds = Math.floor(Date.now() / 1000);\r\n\r\n    const result = await client.query(\r\n      queries.users.verifyUserResetCode, \r\n      [email, code, currentTimeInSeconds]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      client.release();\r\n      return res.status(400).json({ msg: 'Invalid or expired code' });\r\n    }\r\n\r\n    const userId = result.rows[0].id;\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n    await client.query(\r\n      queries.users.updateUserPassword,\r\n      [hashedPassword, userId]\r\n    );\r\n\r\n    client.release();\r\n    res.status(200).json({ msg: 'Password successfully reset' });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}