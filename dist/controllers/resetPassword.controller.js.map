{"version":3,"file":"resetPassword.controller.js","names":["getConnection","queries","sendEmail","bcrypt","requestPasswordReset","req","res","email","provider","body","client","result","query","users","getUserByEmail","rows","length","release","status","json","msg","userId","id","verificationCode","Math","floor","random","toString","expirationDate","Date","now","expirationDateInSeconds","getTime","updateUserResetToken","error","console","verifyCodeAndResetPassword","code","newPassword","currentTimeInSeconds","verifyUserResetCode","hashedPassword","hash","updateUserPassword"],"sources":["../../src/controllers/resetPassword.controller.js"],"sourcesContent":["import { getConnection } from '../database/connection.js';\r\nimport { queries } from '../database/queries.interface.js';\r\nimport { sendEmail } from '../utils/mailer.js';  \r\nimport bcrypt from 'bcrypt';\r\n\r\nexport const requestPasswordReset = async (req, res) => {\r\n  const { email, provider = 'gmail' } = req.body;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    \r\n    const result = await client.query(queries.users.getUserByEmail, [email]);\r\n    if (result.rows.length === 0) {\r\n      client.release();\r\n      return res.status(404).json({ msg: 'Email not found' });\r\n    }\r\n\r\n    const userId = result.rows[0].id;\r\n    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n    const expirationDate = new Date(Date.now() + 10 * 60 * 1000);\r\n    const expirationDateInSeconds = Math.floor(expirationDate.getTime() / 1000);\r\n\r\n    await client.query(\r\n      queries.users.updateUserResetToken,\r\n      [verificationCode, expirationDateInSeconds, userId]\r\n    );\r\n\r\n    await sendEmail(\r\n      email,  \r\n      'Password Reset Code',  \r\n      `Your password reset code is: ${verificationCode}`,  \r\n      provider  \r\n    );\r\n\r\n    client.release();\r\n    res.status(200).json({ msg: 'Verification code sent to email' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n};\r\n\r\nexport const verifyCodeAndResetPassword = async (req, res) => {\r\n  const { email, code, newPassword } = req.body;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n\r\n    const currentTimeInSeconds = Math.floor(Date.now() / 1000);\r\n\r\n    const result = await client.query(\r\n      queries.users.verifyUserResetCode, \r\n      [email, code, currentTimeInSeconds]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      client.release();\r\n      return res.status(400).json({ msg: 'Invalid or expired code' });\r\n    }\r\n\r\n    const userId = result.rows[0].id;\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n    await client.query(\r\n      queries.users.updateUserPassword,\r\n      [hashedPassword, userId]\r\n    );\r\n\r\n    client.release();\r\n    res.status(200).json({ msg: 'Password successfully reset' });\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    res.status(500).json({ msg: 'Server error' });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}