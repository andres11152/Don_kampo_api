{"version":3,"file":"orders.controller.js","names":["getConnection","queries","crypto","placeOrder","req","res","userId","cartDetails","shippingMethod","estimatedDelivery","actualDelivery","total","userData","needsElectronicInvoice","companyName","companyNit","body","trackingNumber","randomBytes","toString","shippingStatusId","status","json","msg","client","userResult","query","rows","length","release","productIds","map","item","productId","productCheckResult","existingProductIds","row","product_id","invalidProducts","filter","id","includes","orderResult","orders","createOrder","Date","orderId","createOrderItem","quantity","price","shipping_info","createShippingInfo","error","console","getOrders","result","getOrdersById","params","orderData","itemsResult","getOrderItemsByOrderId","orderItems","shippingResult","getShippingInfoByOrderId","shippingInfo","order","items","createOrders","customer_id","order_date","status_id","updateOrders","updateOrderStatus","deleteOrders","orderCheck","rowCount"],"sources":["../../src/controllers/orders.controller.js"],"sourcesContent":["  import { getConnection } from '../database/connection.js';\r\n  import { queries } from '../database/queries.interface.js';\r\n  import crypto from 'crypto';\r\n  \r\n\r\n  export const placeOrder = async (req, res) => {\r\n    const { userId, cartDetails, shippingMethod, estimatedDelivery, actualDelivery, total, userData, needsElectronicInvoice, companyName, companyNit } = req.body;\r\n    const trackingNumber = crypto.randomBytes(5).toString('hex');\r\n    const shippingStatusId = 1;\r\n\r\n    if (!userId || !cartDetails || !total) {\r\n        return res.status(400).json({ msg: 'Información incompleta para procesar el pedido.' });\r\n    }\r\n\r\n    try {\r\n        const client = await getConnection();\r\n\r\n        const userResult = await client.query(\r\n            `SELECT id FROM users WHERE id = $1`,\r\n            [userId]\r\n        );\r\n\r\n        if (userResult.rows.length === 0) {\r\n            client.release();\r\n            return res.status(404).json({ msg: 'Usuario no encontrado.' });\r\n        }\r\n\r\n        const productIds = cartDetails.map((item) => item.productId);\r\n        const productCheckResult = await client.query(\r\n            `SELECT product_id FROM products WHERE product_id = ANY($1)`,\r\n            [productIds]\r\n        );\r\n\r\n        const existingProductIds = productCheckResult.rows.map((row) => row.product_id);\r\n        const invalidProducts = productIds.filter((id) => !existingProductIds.includes(id));\r\n\r\n        if (invalidProducts.length > 0) {\r\n            client.release();\r\n            return res.status(400).json({\r\n                msg: 'Algunos productos no existen en el catálogo.',\r\n                invalidProducts,\r\n            });\r\n        }\r\n\r\n        const orderResult = await client.query(queries.orders.createOrder, [\r\n            userId,\r\n            new Date(),\r\n            1, \r\n            total,\r\n            needsElectronicInvoice || false,\r\n            companyName || null,\r\n            companyNit || null,\r\n        ]);\r\n        const orderId = orderResult.rows[0].id;\r\n\r\n        for (const item of cartDetails) {\r\n            await client.query(queries.orders.createOrderItem, [\r\n                orderId,\r\n                item.productId,\r\n                item.quantity,\r\n                item.price,\r\n            ]);\r\n        }\r\n\r\n        if (shippingMethod && estimatedDelivery && actualDelivery) {\r\n            await client.query(queries.shipping_info.createShippingInfo, [\r\n                shippingMethod,\r\n                trackingNumber,\r\n                estimatedDelivery,\r\n                actualDelivery,\r\n                shippingStatusId,\r\n                orderId,\r\n            ]);\r\n        }\r\n\r\n        client.release();\r\n        res.status(201).json({ msg: 'Pedido realizado exitosamente.', orderId });\r\n    } catch (error) {\r\n        console.error('Error al realizar el pedido:', error);\r\n        res.status(500).json({ msg: 'Error interno del servidor.' });\r\n    }\r\n};\r\n\r\n\r\n  export const getOrders = async (req, res) => {\r\n    try {\r\n      const client = await getConnection();\r\n      const result = await client.query(queries.orders.getOrders);\r\n      client.release();\r\n      res.status(200).json(result.rows);\r\n    } catch (error) {\r\n      console.error('Error al obtener los pedidos:', error);\r\n      res.status(500).json({ msg: 'Error al obtener los pedidos.' });\r\n    }\r\n  };\r\n\r\n  export const getOrdersById = async (req, res) => {\r\n    try {\r\n      const { orderId } = req.params;\r\n      const client = await getConnection();\r\n\r\n\r\n      const orderResult = await client.query(queries.orders.getOrdersById, [orderId]);\r\n      if (orderResult.rows.length === 0) {\r\n        client.release();\r\n        return res.status(404).json({ msg: 'Pedido no encontrado.' });\r\n      }\r\n      const orderData = orderResult.rows[0];\r\n      const itemsResult = await client.query(queries.orders.getOrderItemsByOrderId, [orderId]);\r\n      const orderItems = itemsResult.rows;\r\n      const shippingResult = await client.query(queries.orders.getShippingInfoByOrderId, [orderId]);\r\n      const shippingInfo = shippingResult.rows.length > 0 ? shippingResult.rows[0] : null;\r\n\r\n      client.release();\r\n\r\n      res.status(200).json({\r\n        order: orderData,\r\n        items: orderItems,\r\n        shippingInfo,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error al obtener el pedido:', error);\r\n      res.status(500).json({ msg: 'Error al obtener el pedido.' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Crea un nuevo pedido.\r\n   */\r\n  export const createOrders = async (req, res) => {\r\n    const { customer_id, order_date, status_id, total } = req.body;\r\n\r\n    if (!customer_id || !order_date || !status_id || !total) {\r\n      return res.status(400).json({ msg: 'Campos obligatorios incompletos.' });\r\n    }\r\n\r\n    try {\r\n      const client = await getConnection();\r\n      await client.query(queries.orders.createOrder, [customer_id, order_date, status_id, total]);\r\n      client.release();\r\n      res.status(201).json({ msg: 'Pedido creado exitosamente.' });\r\n    } catch (error) {\r\n      console.error('Error al crear el pedido:', error);\r\n      res.status(500).json({ msg: 'Error interno del servidor.' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Actualiza un pedido existente.\r\n   */\r\n  export const updateOrders = async (req, res) => {\r\n    const { id, customer_id, order_date, status_id, total } = req.body;\r\n\r\n    if (!id || !customer_id || !order_date || !status_id || !total) {\r\n      return res.status(400).json({ msg: 'Campos obligatorios incompletos.' });\r\n    }\r\n\r\n    try {\r\n      const client = await getConnection();\r\n      await client.query(queries.orders.updateOrders, [customer_id, order_date, status_id, total, id]);\r\n      client.release();\r\n      res.status(200).json({ msg: 'Pedido actualizado exitosamente.' });\r\n    } catch (error) {\r\n      console.error('Error al actualizar el pedido:', error);\r\n      res.status(500).json({ msg: 'Error interno del servidor.' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Actualiza el estado de un pedido.\r\n   */\r\n  export const updateOrderStatus = async (req, res) => {\r\n    const { id, status_id } = req.params;\r\n\r\n    if (!id || !status_id) {\r\n      return res.status(400).json({ msg: 'ID de pedido o estado no proporcionado.' });\r\n    }\r\n\r\n    try {\r\n      const client = await getConnection();\r\n      await client.query(queries.orders.updateOrderStatus, [status_id, id]);\r\n      client.release();\r\n      res.status(200).json({ msg: 'Estado del pedido actualizado exitosamente.' });\r\n    } catch (error) {\r\n      console.error('Error al actualizar el estado del pedido:', error);\r\n      res.status(500).json({ msg: 'Error interno del servidor.' });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Elimina un pedido.\r\n   */\r\n  export const deleteOrders = async (req, res) => {\r\n    const { orderId } = req.params;\r\n\r\n    if (!orderId) {\r\n      return res.status(400).json({ msg: 'ID del pedido no proporcionado.' });\r\n    }\r\n\r\n    try {\r\n      const client = await getConnection();\r\n      const orderCheck = await client.query('SELECT id FROM orders WHERE id = $1', [orderId]);\r\n      if (orderCheck.rowCount === 0) {\r\n        client.release();\r\n        return res.status(404).json({ msg: 'Pedido no encontrado.' });\r\n      }\r\n\r\n      await client.query(queries.orders.deleteOrders, [orderId]);\r\n      client.release();\r\n      res.status(200).json({ msg: 'Pedido eliminado exitosamente.' });\r\n    } catch (error) {\r\n      console.error('Error al eliminar el pedido:', error);\r\n      res.status(500).json({ msg: 'Error interno del servidor.' });\r\n    }\r\n  };\r\n"],"mappings":"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","ignoreList":[]}