{"version":3,"file":"shipping.controller.js","names":["getConnection","queries","createShippingInfo","_ref","_asyncToGenerator","req","res","shipping_method","tracking_number","estimated_delivery","actual_delivery","shipping_status_id","body","status","json","msg","client","query","shipping_info","order_id","release","error","console","_x","_x2","apply","arguments","getShippingInfo","_ref2","result","rows","_x3","_x4","getShippingInfoById","_ref3","id","params","length","_x5","_x6","updateShippingInfo","_ref4","rowCount","_x7","_x8","deleteShippingInfo","_ref5","_x9","_x10"],"sources":["../../src/controllers/shipping.controller.js"],"sourcesContent":["// Importar el pool y las queries\r\nimport { getConnection } from \"../database/connection.js\";\r\nimport { queries } from \"../database/queries.interface.js\";\r\n\r\n// Crear nueva información de envío\r\nexport const createShippingInfo = async (req, res) => {\r\n  const {\r\n    shipping_method,\r\n    tracking_number,\r\n    estimated_delivery,\r\n    actual_delivery,\r\n    shipping_status_id,\r\n  } = req.body;\r\n\r\n  // Validación de campos obligatorios\r\n  if (!shipping_method || !shipping_status_id) {\r\n    return res.status(400).json({\r\n      msg: \"Faltan campos obligatorios: shipping_method o shipping_status_id.\",\r\n    });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    await client.query(queries.shipping_info.createShippingInfo, [\r\n      shipping_method,\r\n      tracking_number,\r\n      estimated_delivery,\r\n      actual_delivery,\r\n      shipping_status_id,\r\n      order_id\r\n    ]);\r\n\r\n    client.release();\r\n\r\n    return res.status(201).json({\r\n      msg: \"Información de envío creada con éxito\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al crear la información de envío:\", error); // Log del error\r\n    return res.status(500).json({\r\n      msg: \"Error al crear la información de envío\",\r\n    });\r\n  }\r\n};\r\n\r\n// Obtener toda la información de envíos\r\nexport const getShippingInfo = async (req, res) => {\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.shipping_info.getShippingInfo);\r\n\r\n    client.release();\r\n\r\n    return res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error(\"Error al obtener la información de envíos:\", error);\r\n    return res.status(500).json({\r\n      msg: \"Error al obtener la información de envíos\",\r\n    });\r\n  }\r\n};\r\n\r\n// Obtener información de envío por ID\r\nexport const getShippingInfoById = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.shipping_info.getShippingInfoById, [\r\n      id,\r\n    ]);\r\n\r\n    client.release();\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ msg: \"Información de envío no encontrada\" });\r\n    }\r\n\r\n    return res.status(200).json(result.rows[0]);\r\n  } catch (error) {\r\n    console.error(\"Error al obtener la información de envío:\", error);\r\n    return res.status(500).json({\r\n      msg: \"Error al obtener la información de envío\",\r\n    });\r\n  }\r\n};\r\n\r\n// Actualizar información de envío\r\nexport const updateShippingInfo = async (req, res) => {\r\n  const { id } = req.params;\r\n  const {\r\n    shipping_method,\r\n    tracking_number,\r\n    estimated_delivery,\r\n    actual_delivery,\r\n    shipping_status_id,\r\n  } = req.body;\r\n\r\n  // Validación de campos obligatorios\r\n  if (!shipping_method || !shipping_status_id) {\r\n    return res.status(400).json({\r\n      msg: \"Faltan campos obligatorios: shipping_method o shipping_status_id.\",\r\n    });\r\n  }\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.shipping_info.updateShippingInfo, [\r\n      shipping_method,\r\n      tracking_number,\r\n      estimated_delivery,\r\n      actual_delivery,\r\n      shipping_status_id,\r\n      id,\r\n    ]);\r\n\r\n    client.release();\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ msg: \"Información de envío no encontrada\" });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      msg: \"Información de envío actualizada con éxito\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al actualizar la información de envío:\", error);\r\n    return res.status(500).json({\r\n      msg: \"Error al actualizar la información de envío\",\r\n    });\r\n  }\r\n};\r\n\r\n// Eliminar información de envío\r\nexport const deleteShippingInfo = async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    const client = await getConnection();\r\n    const result = await client.query(queries.shipping_info.deleteShippingInfo, [\r\n      id,\r\n    ]);\r\n\r\n    client.release();\r\n\r\n    if (result.rowCount === 0) {\r\n      return res.status(404).json({ msg: \"Información de envío no encontrada\" });\r\n    }\r\n\r\n    return res.status(200).json({\r\n      msg: \"Información de envío eliminada con éxito\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al eliminar la información de envío:\", error);\r\n    return res.status(500).json({\r\n      msg: \"Error al eliminar la información de envío\",\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]}